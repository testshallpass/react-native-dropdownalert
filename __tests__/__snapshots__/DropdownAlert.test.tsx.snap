// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Animated.View onLayout function 1`] = `
<View
  collapsable={false}
  onLayout={[Function]}
  onMoveShouldSetResponder={[Function]}
  onMoveShouldSetResponderCapture={[Function]}
  onResponderEnd={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderReject={[Function]}
  onResponderRelease={[Function]}
  onResponderStart={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  onStartShouldSetResponderCapture={[Function]}
  style={
    {
      "elevation": 1,
      "left": 0,
      "position": "absolute",
      "right": 0,
      "top": 0,
      "transform": [
        {
          "translateY": 0,
        },
      ],
      "zIndex": 1,
    }
  }
  testID="animatedView"
>
  <View
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": false,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessibilityValue={
      {
        "max": undefined,
        "min": undefined,
        "now": undefined,
        "text": undefined,
      }
    }
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      {
        "backgroundColor": "#cd853f",
        "opacity": 1,
        "padding": 8,
      }
    }
    testID="alert"
  >
    <RCTSafeAreaView
      style={
        {
          "alignItems": "center",
          "flexDirection": "row",
        }
      }
      testID="safeView"
    >
      <Image
        source={
          {
            "testUri": "../../../assets/warn.png",
          }
        }
        style={
          {
            "height": 36,
            "width": 36,
          }
        }
        testID="image"
      />
      <View
        style={
          {
            "flex": 1,
            "marginHorizontal": 8,
          }
        }
        testID="textView"
      >
        <Text
          numberOfLines={1}
          style={
            {
              "color": "white",
              "fontSize": 16,
              "fontWeight": "bold",
            }
          }
          testID="title"
        >
          title
        </Text>
        <Text
          numberOfLines={3}
          style={
            {
              "color": "white",
              "fontSize": 16,
            }
          }
          testID="title"
        >
          message
        </Text>
      </View>
    </RCTSafeAreaView>
  </View>
</View>
`;

exports[`DropdownAlertType.Error 1`] = `
<View
  collapsable={false}
  onLayout={[Function]}
  onMoveShouldSetResponder={[Function]}
  onMoveShouldSetResponderCapture={[Function]}
  onResponderEnd={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderReject={[Function]}
  onResponderRelease={[Function]}
  onResponderStart={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  onStartShouldSetResponderCapture={[Function]}
  style={
    {
      "elevation": 1,
      "left": 0,
      "position": "absolute",
      "right": 0,
      "top": 0,
      "transform": [
        {
          "translateY": -99,
        },
      ],
      "zIndex": 1,
    }
  }
  testID="animatedView"
>
  <View
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": false,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessibilityValue={
      {
        "max": undefined,
        "min": undefined,
        "now": undefined,
        "text": undefined,
      }
    }
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      {
        "backgroundColor": "#cc3232",
        "opacity": 1,
        "padding": 8,
      }
    }
    testID="alert"
  >
    <RCTSafeAreaView
      style={
        {
          "alignItems": "center",
          "flexDirection": "row",
        }
      }
      testID="safeView"
    >
      <Image
        source={
          {
            "testUri": "../../../assets/error.png",
          }
        }
        style={
          {
            "height": 36,
            "width": 36,
          }
        }
        testID="image"
      />
      <View
        style={
          {
            "flex": 1,
            "marginHorizontal": 8,
          }
        }
        testID="textView"
      />
    </RCTSafeAreaView>
  </View>
</View>
`;

exports[`DropdownAlertType.Info 1`] = `
<View
  collapsable={false}
  onLayout={[Function]}
  onMoveShouldSetResponder={[Function]}
  onMoveShouldSetResponderCapture={[Function]}
  onResponderEnd={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderReject={[Function]}
  onResponderRelease={[Function]}
  onResponderStart={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  onStartShouldSetResponderCapture={[Function]}
  style={
    {
      "elevation": 1,
      "left": 0,
      "position": "absolute",
      "right": 0,
      "top": 0,
      "transform": [
        {
          "translateY": -99,
        },
      ],
      "zIndex": 1,
    }
  }
  testID="animatedView"
>
  <View
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": false,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessibilityValue={
      {
        "max": undefined,
        "min": undefined,
        "now": undefined,
        "text": undefined,
      }
    }
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      {
        "backgroundColor": "#2b73b6",
        "opacity": 1,
        "padding": 8,
      }
    }
    testID="alert"
  >
    <RCTSafeAreaView
      style={
        {
          "alignItems": "center",
          "flexDirection": "row",
        }
      }
      testID="safeView"
    >
      <Image
        source={
          {
            "testUri": "../../../assets/info.png",
          }
        }
        style={
          {
            "height": 36,
            "width": 36,
          }
        }
        testID="image"
      />
      <View
        style={
          {
            "flex": 1,
            "marginHorizontal": 8,
          }
        }
        testID="textView"
      />
    </RCTSafeAreaView>
  </View>
</View>
`;

exports[`DropdownAlertType.Success 1`] = `
<View
  collapsable={false}
  onLayout={[Function]}
  onMoveShouldSetResponder={[Function]}
  onMoveShouldSetResponderCapture={[Function]}
  onResponderEnd={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderReject={[Function]}
  onResponderRelease={[Function]}
  onResponderStart={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  onStartShouldSetResponderCapture={[Function]}
  style={
    {
      "elevation": 1,
      "left": 0,
      "position": "absolute",
      "right": 0,
      "top": 0,
      "transform": [
        {
          "translateY": -99,
        },
      ],
      "zIndex": 1,
    }
  }
  testID="animatedView"
>
  <View
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": false,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessibilityValue={
      {
        "max": undefined,
        "min": undefined,
        "now": undefined,
        "text": undefined,
      }
    }
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      {
        "backgroundColor": "#32a54a",
        "opacity": 1,
        "padding": 8,
      }
    }
    testID="alert"
  >
    <RCTSafeAreaView
      style={
        {
          "alignItems": "center",
          "flexDirection": "row",
        }
      }
      testID="safeView"
    >
      <Image
        source={
          {
            "testUri": "../../../assets/success.png",
          }
        }
        style={
          {
            "height": 36,
            "width": 36,
          }
        }
        testID="image"
      />
      <View
        style={
          {
            "flex": 1,
            "marginHorizontal": 8,
          }
        }
        testID="textView"
      />
    </RCTSafeAreaView>
  </View>
</View>
`;

exports[`DropdownAlertType.Warn 1`] = `
<View
  collapsable={false}
  onLayout={[Function]}
  onMoveShouldSetResponder={[Function]}
  onMoveShouldSetResponderCapture={[Function]}
  onResponderEnd={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderReject={[Function]}
  onResponderRelease={[Function]}
  onResponderStart={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  onStartShouldSetResponderCapture={[Function]}
  style={
    {
      "elevation": 1,
      "left": 0,
      "position": "absolute",
      "right": 0,
      "top": 0,
      "transform": [
        {
          "translateY": -99,
        },
      ],
      "zIndex": 1,
    }
  }
  testID="animatedView"
>
  <View
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": false,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessibilityValue={
      {
        "max": undefined,
        "min": undefined,
        "now": undefined,
        "text": undefined,
      }
    }
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      {
        "backgroundColor": "#cd853f",
        "opacity": 1,
        "padding": 8,
      }
    }
    testID="alert"
  >
    <RCTSafeAreaView
      style={
        {
          "alignItems": "center",
          "flexDirection": "row",
        }
      }
      testID="safeView"
    >
      <Image
        source={
          {
            "testUri": "../../../assets/warn.png",
          }
        }
        style={
          {
            "height": 36,
            "width": 36,
          }
        }
        testID="image"
      />
      <View
        style={
          {
            "flex": 1,
            "marginHorizontal": 8,
          }
        }
        testID="textView"
      />
    </RCTSafeAreaView>
  </View>
</View>
`;

exports[`children prop 1`] = `
<View
  collapsable={false}
  onLayout={[Function]}
  onMoveShouldSetResponder={[Function]}
  onMoveShouldSetResponderCapture={[Function]}
  onResponderEnd={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderReject={[Function]}
  onResponderRelease={[Function]}
  onResponderStart={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  onStartShouldSetResponderCapture={[Function]}
  style={
    {
      "elevation": 1,
      "left": 0,
      "position": "absolute",
      "right": 0,
      "top": 0,
      "transform": [
        {
          "translateY": -99,
        },
      ],
      "zIndex": 1,
    }
  }
  testID="animatedView"
>
  <View
    testID="childView"
  >
    <Text
      testID="childText"
    >
      My Child Text
    </Text>
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      testID="childButton"
    >
      My Button
    </View>
  </View>
</View>
`;

exports[`it renders component 1`] = `
<View
  collapsable={false}
  onLayout={[Function]}
  onMoveShouldSetResponder={[Function]}
  onMoveShouldSetResponderCapture={[Function]}
  onResponderEnd={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderReject={[Function]}
  onResponderRelease={[Function]}
  onResponderStart={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  onStartShouldSetResponderCapture={[Function]}
  style={
    {
      "elevation": 1,
      "left": 0,
      "position": "absolute",
      "right": 0,
      "top": 0,
      "transform": [
        {
          "translateY": -99,
        },
      ],
      "zIndex": 1,
    }
  }
  testID="animatedView"
>
  <View
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": false,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessibilityValue={
      {
        "max": undefined,
        "min": undefined,
        "now": undefined,
        "text": undefined,
      }
    }
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      {
        "backgroundColor": "#000000",
        "opacity": 1,
        "padding": 8,
      }
    }
    testID="alert"
  >
    <RCTSafeAreaView
      style={
        {
          "alignItems": "center",
          "flexDirection": "row",
        }
      }
      testID="safeView"
    >
      <View
        style={
          {
            "flex": 1,
            "marginHorizontal": 8,
          }
        }
        testID="textView"
      />
    </RCTSafeAreaView>
  </View>
</View>
`;

exports[`it updates status bar on Android 1`] = `
<View
  collapsable={false}
  onLayout={[Function]}
  onMoveShouldSetResponder={[Function]}
  onMoveShouldSetResponderCapture={[Function]}
  onResponderEnd={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderReject={[Function]}
  onResponderRelease={[Function]}
  onResponderStart={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  onStartShouldSetResponderCapture={[Function]}
  style={
    {
      "elevation": 1,
      "left": 0,
      "position": "absolute",
      "right": 0,
      "top": 0,
      "transform": [
        {
          "translateY": -99,
        },
      ],
      "zIndex": 1,
    }
  }
  testID="animatedView"
>
  <View
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": false,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessibilityValue={
      {
        "max": undefined,
        "min": undefined,
        "now": undefined,
        "text": undefined,
      }
    }
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      {
        "backgroundColor": "#000000",
        "marginTop": 20,
        "opacity": 1,
        "padding": 8,
      }
    }
    testID="alert"
  >
    <View
      style={
        {
          "alignItems": "center",
          "flexDirection": "row",
        }
      }
      testID="safeView"
    >
      <View
        style={
          {
            "flex": 1,
            "marginHorizontal": 8,
          }
        }
        testID="textView"
      />
    </View>
  </View>
</View>
`;

exports[`multiple queued alerts 1`] = `
<View
  collapsable={false}
  onLayout={[Function]}
  onMoveShouldSetResponder={[Function]}
  onMoveShouldSetResponderCapture={[Function]}
  onResponderEnd={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderReject={[Function]}
  onResponderRelease={[Function]}
  onResponderStart={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  onStartShouldSetResponderCapture={[Function]}
  style={
    {
      "elevation": 1,
      "left": 0,
      "position": "absolute",
      "right": 0,
      "top": 0,
      "transform": [
        {
          "translateY": -99,
        },
      ],
      "zIndex": 1,
    }
  }
  testID="animatedView"
>
  <View
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": false,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessibilityValue={
      {
        "max": undefined,
        "min": undefined,
        "now": undefined,
        "text": undefined,
      }
    }
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      {
        "backgroundColor": "#cc3232",
        "opacity": 1,
        "padding": 8,
      }
    }
    testID="alert"
  >
    <RCTSafeAreaView
      style={
        {
          "alignItems": "center",
          "flexDirection": "row",
        }
      }
      testID="safeView"
    >
      <Image
        source={
          {
            "testUri": "../../../assets/error.png",
          }
        }
        style={
          {
            "height": 36,
            "width": 36,
          }
        }
        testID="image"
      />
      <View
        style={
          {
            "flex": 1,
            "marginHorizontal": 8,
          }
        }
        testID="textView"
      >
        <Text
          numberOfLines={1}
          style={
            {
              "color": "white",
              "fontSize": 16,
              "fontWeight": "bold",
            }
          }
          testID="title"
        >
          Error
        </Text>
        <Text
          numberOfLines={3}
          style={
            {
              "color": "white",
              "fontSize": 16,
            }
          }
          testID="title"
        >
          Dolore dolor veniam culpa proident veniam incididunt in laboris irure fugiat cupidatat.
        </Text>
      </View>
    </RCTSafeAreaView>
  </View>
</View>
`;

exports[`renderImage, renderTitle, renderMessage and renderCancel props 1`] = `
<View
  collapsable={false}
  onLayout={[Function]}
  onMoveShouldSetResponder={[Function]}
  onMoveShouldSetResponderCapture={[Function]}
  onResponderEnd={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderReject={[Function]}
  onResponderRelease={[Function]}
  onResponderStart={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  onStartShouldSetResponderCapture={[Function]}
  style={
    {
      "elevation": 1,
      "left": 0,
      "position": "absolute",
      "right": 0,
      "top": 0,
      "transform": [
        {
          "translateY": -99,
        },
      ],
      "zIndex": 1,
    }
  }
  testID="animatedView"
>
  <View
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": false,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessibilityValue={
      {
        "max": undefined,
        "min": undefined,
        "now": undefined,
        "text": undefined,
      }
    }
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      {
        "backgroundColor": "#000000",
        "opacity": 1,
        "padding": 8,
      }
    }
    testID="alert"
  >
    <RCTSafeAreaView
      style={
        {
          "alignItems": "center",
          "flexDirection": "row",
        }
      }
      testID="safeView"
    >
      <Image
        source={
          {
            "testUri": "../../../assets/info.png",
          }
        }
        testID="myImage"
      />
      <View
        style={
          {
            "flex": 1,
            "marginHorizontal": 8,
          }
        }
        testID="textView"
      >
        <Text>
          myTitle
        </Text>
        <Text>
          myMessage
        </Text>
      </View>
      <View
        accessibilityState={
          {
            "busy": undefined,
            "checked": undefined,
            "disabled": undefined,
            "expanded": undefined,
            "selected": undefined,
          }
        }
        accessibilityValue={
          {
            "max": undefined,
            "min": undefined,
            "now": undefined,
            "text": undefined,
          }
        }
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        testID="myButton"
      >
        Cancel
      </View>
    </RCTSafeAreaView>
  </View>
</View>
`;
